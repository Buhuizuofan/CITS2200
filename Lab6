import java.util.LinkedList;
import CITS2200.BinaryTree;
import CITS2200.Iterator;
import CITS2200.OutOfBounds;

/**The aim of the subclass BinTree is to complete the equals method and the iterator method by using the methods of BinaryTree.*/ 
public class BinTree<E> extends BinaryTree<E>{
    public BinTree(){ super(); }

    public BinTree(E item, BinaryTree<E> b1, BinaryTree<E> b2){ super(item,b1,b2); }
    
    
    /**Using recursive method to check whether two trees are equal. 
     * @param arg0 the type is Object.
     * @return boolean if two trees are equal then return true, false otherwise.
     */
    @Override
    public boolean equals(Object arg0) {
        if (arg0 instanceof BinTree<?>) {
            BinTree<?> t = (BinTree<?>)arg0;
            if(isEmpty() && t.isEmpty())
            return true;
            else if(isEmpty() || t.isEmpty())
            return false;
            if(!getItem().equals(t.getItem()))
            return false;

            return getLeft().equals(t.getLeft()) && getRight().equals(t.getRight());
        } 
            return false;
    }

    
    /**Traverse every element of the tree.  
     * @return Iterator<E> the type is E.
     */
    @Override
    public Iterator<E> iterator() {
        
        return new BinTreeIterator<E>(this);
    }
    
    /**Subclass of the iterator */
    public class BinTreeIterator<E> implements Iterator<E>{
        /**Create a queue */
        private LinkedList<BinaryTree<E>> q = new LinkedList<BinaryTree<E>>();
        
        /**Create a pointer, the start position is 0 */
        private int index =0;
        
        /**Checks whether the tree has the next element.
         * @return if the value of index is less than the size of q then return true, false otherwise.
         */
        @Override
        public boolean hasNext() {
            return index < q.size();
        }
        
        /**Get the next element of the tree.
         * @return return the next element of the tree.
         * @throws throw an Underflow exception if there is no next element in the tree.
         */
        @Override
        public E next() throws OutOfBounds {
            if(hasNext())
            return  q.get(index++).getItem();
            else throw new OutOfBounds("arg0");
        }
        
        /**Create a queue and get every element of the tree by using add method to traverse this tree. 
         * @param root the type is BinTree<E>.
         */
        public BinTreeIterator(BinTree<E> root){
            if(!root.isEmpty()) q.add(root);
            while(index < q.size()){
                if(!q.get(index).getLeft().isEmpty()){
                    q.add(q.get(index).getLeft());
                }
                if(!q.get(index).getRight().isEmpty()){
                    q.add(q.get(index).getRight());
                }
                index ++;
            }
            index = 0;
        }

    }
}
