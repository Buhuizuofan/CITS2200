import java.util.Queue;

import java.util.LinkedList;



import CITS2200.Graph;

import CITS2200.Search;



public class SearchImp implements Search{

    int[][] result;

    

    

    

    /** 

     * Get parent vertex for each vertex.

     * @param g graph

     * @param root startVertex

     * @return int[] return an array, the type is int[].

     */

    @Override

    public int[] getConnectedTree(Graph g, int root) {

        int[] result = new int[g.getNumberOfVertices()];

        for(int j = 1; j < g.getNumberOfVertices(); j++){

            result[j] = -1;

        }

        Queue<Integer> q = new LinkedList<Integer>();

        int matrix[][] = g.getEdgeMatrix();

        q.add(root);

        result[root] = -1;

        while(!q.isEmpty()){

          int x = q.remove();

          for(int i =0; i<g.getNumberOfVertices(); i++){

              if(matrix[x][i] == 1 && result[i] == -1 && i != root){

                  q.add(i);

                  result[i] =x;

              }

          }

        }

        return result;

    }



    

    /**

     * Get the distance from each vertex to the starting vertex.

     * @param g graph.

     * @param root starting vertex.

     * @return int[] return an array, the type is int[].

     */

    @Override

    public int[] getDistances(Graph g, int root) {

        int[] result = new int[g.getNumberOfVertices()];

        for(int j = 1; j < g.getNumberOfVertices(); j++){

            result[j] = -1;

        }

        result[root] = 0;

        Queue<Integer> q = new LinkedList<Integer>();

        int matrix[][] = g.getEdgeMatrix();

        q.add(root);

        while(!q.isEmpty()){

            int x = q.remove();

            for(int i =0; i<g.getNumberOfVertices(); i++){

                if(matrix[x][i] == 1 && result[i] ==-1){

                    q.add(i);

                    result[i] =result[x]+1;

                }

            }

        }

        return result;

    }



    

    /**

     * Get the start and finish time of each vertex. 

     * @param g graph.

     * @param root starting vertex.

     * @return int[][] the type is int[][].

     */

    @Override

    public int[][] getTimes(Graph g, int root) {

        int matrix[][] = g.getEdgeMatrix();

        result = new int[g.getNumberOfVertices()][2];

        result[root][0] = 0;

        result[root][1] = endTime(matrix,root,g, root);

    

        return result;



    }



    

    /**

     * Get endtime of each vertex.

     * @param matrix type is int[][].

     * @param check vertex needs to be checked.

     * @param g graph.

     * @param root starting vertex.

     * @return int the type is int.

     */

    private int endTime( int[][] matrix, int check, Graph g, int root){

        int time = result[root][1] +1;

        for(int i =0; i<g.getNumberOfVertices(); i++){

            if(matrix[check][i] == 1 && result[i][1] == 0){

                result[check][0] =time;

                result[check][1] = endTime(matrix,check,g, root);

            }

        }

        return time;

    }

}

